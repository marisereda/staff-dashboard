generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Employee {
  id              String  @id @default(cuid())
  code1C          String? @unique
  inn             String? @unique
  isFop           Boolean @default(false)
  name            String
  phone           String?
  updateStatusHr  String?
  updateStatusBuh String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workplacesHr  WorkplaceHr[]
  workplacesBuh WorkplaceBuh[]
  note          Note?
}

model Store {
  id             String  @id @default(cuid())
  code1C         String? @unique
  addressHr      String?
  addressBuh     String?
  checkoutNumber Int     @default(0)
  placesAmount   Int     @default(0)
  updateStatus   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workplacesHr  WorkplaceHr[]
  workplacesBuh WorkplaceBuh[]
}

model Employer {
  id           String  @id @default(cuid())
  inn          String  @unique
  isSingleTax  Boolean @default(false)
  name         String
  updateStatus String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workplacesBuh WorkplaceBuh[]
}

model WorkplaceHr {
  id         String @id @default(cuid())
  employeeId String
  storeId    String
  position   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  store    Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model WorkplaceBuh {
  id         String @id @default(cuid())
  employeeId String
  storeId    String
  employerId String
  position   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  store    Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  employer Employer @relation(fields: [employerId], references: [id], onDelete: Cascade)
}

model Note {
  id          String  @id @default(cuid())
  title       String?
  content     String?
  isDone      Boolean @default(false)
  isImportant Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String   @unique
  owner   Employee @relation(fields: [ownerId], references: [id])
}
