generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Employee {
  id           String   @id @default(cuid())
  code1C       String?  @unique
  inn          String?  @unique
  name         String
  phone        String?
  isFop        Boolean? @default(false)
  updateStatus String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeEmployers EmployeeEmployer[]
  employeeStores    EmployeeStore[]
  notes             Note[]
}

model Employer {
  id           String   @id @default(cuid())
  inn          String   @unique
  name         String
  isSingleTax  Boolean? @default(false)
  updateStatus String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employerEmployees EmployeeEmployer[]
  stores            Store[]
  notes             Note[]
}

model Store {
  id             String  @id @default(cuid())
  code1C         String  @unique
  address        String
  checkoutNumber Int?
  placesAmount   Int?
  updateStatus   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeEmployees EmployeeStore[]
  employers      Employer[]
  notes          Note[]
}

model EmployeeEmployer {
  id              String @id @default(cuid())
  employeeId      String
  employerId      String
  positionBuh     String
  storeAddressBuh String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employer Employer @relation(fields: [employerId], references: [id], onDelete: Cascade)
}

model EmployeeStore {
  id         String @id @default(cuid())
  employeeId String
  storeId    String
  positionHr String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  store    Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model Note {
  id          String  @id @default(cuid())
  ownerId     String?
  title       String
  content     String?
  isDone      Boolean @default(false)
  isImportant Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employee? @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  employer Employer? @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  store    Store?    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}
